#block
 import datetime
 import hashlib
 
 class Block:
	blockNO = 0
	data = None
	next = None
	hash = None
	previous_hash = 0x0
	timestamp = datetime.datetime.now()
	
	def __init__(self,data):
		self.data = data
		
	def hash(self):
	h = hashlib.sha256()
	h.update{
	str(self.nonce).encode('utf-8') +
	str(self.data).encode('utf-8') +
	str(self.previous_hash).encode('utf-8') +
	str(self.timestamp).encode('utf-8') +
	str(self.blockNO).encode('utf-8') +
	}
	return h.hexdigest()
	
	def __str__(self):
		return "Block Hash:" + str(self.hash()) + "\nBlockNo: " + str(self.blockNO)



#genesis block

from hashlib import sha256
import json
import time
class Block: 
    def__init__(self, index, transactions, timestamp, previous_hash): 
        self.index = index 
        self.transactions = transactions 
        self.timestamp = timestamp
        self.previous_hash = previous_hash 
 
    def compute_hash(self): 
        block_string = json.dumps(self.__dict__, sort_keys=True) 
        return sha256(block_string.encode()).hexdigest()
		
##here's our Blockchain class

class Blockchain:
 
    def __init__(self):
        self.unconfirmed_transactions = [] # data yet to get into blockchain
        self.chain = []
        self.create_genesis_block()
 
    def create_genesis_block(self):
        
 
    @property
    def last_block(self):
        return self.chain[-1]
		
		
##Proof of Work 

class Blockchain:
    difficulty = 2
 
    def proof_of_work(self, block):
        block.nonce = 0
 
        computed_hash = block.compute_hash()
        while not computed_hash.startswith('0' * Blockchain.difficulty):
            block.nonce += 1
            computed_hash = block.compute_hash()
 
        return computed_hash

##Add blocks to the chain

class Blockchain:
    def add_block(self, block, proof):
		previous_hash = self.last_block.hash
 
        if previous_hash != block.previous_hash:
            return False
 
        if not self.is_valid_proof(block, proof):
            return False
 
        block.hash = proof
        self.chain.append(block)
        return True
 
    def is_valid_proof(self, block, block_hash):
        
        return (block_hash.startswith('0' * Blockchain.difficulty) and
                block_hash == block.compute_hash())		
				
				
##Transactions 

class Blockchain:
    def add_new_transaction(self, transaction):
            self.unconfirmed_transactions.append(transaction)
 
    def mine(self):
        if not self.unconfirmed_transactions:
            return False
 
        last_block = self.last_block
 
        new_block = Block(index=last_block.index + 1,
                          transactions=self.unconfirmed_transactions,
                          timestamp=time.time(),
                          previous_hash=last_block.hash)
 
        proof = self.proof_of_work(new_block)
        self.add_block(new_block, proof)
        self.unconfirmed_transactions = []
        return new_block.index				
		
		
## Below is some explanation of the most important parts in the blockchain

class Transaction:

    def __init__(self, sender_address, sender_private_key, recipient_address, value):
        self.sender_address = sender_address
        self.sender_private_key = sender_private_key
        self.recipient_address = recipient_address
        self.value = value

    def __getattr__(self, attr):
        return self.data[attr]

    def to_dict(self):
        return OrderedDict({'sender_address': self.sender_address,
                            'recipient_address': self.recipient_address,
                            'value': self.value})

    def sign_transaction(self):
        """
        Sign transaction with private key
        """
        private_key = RSA.importKey(binascii.unhexlify(self.sender_private_key))
        signer = PKCS1_v1_5.new(private_key)
        h = SHA.new(str(self.to_dict()).encode('utf8'))
        return binascii.hexlify(signer.sign(h)).decode('ascii')
		
		